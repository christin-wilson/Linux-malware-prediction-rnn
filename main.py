import numpy as np
import pandas as pd
from copy import deepcopy
import gc

from col_headers import Header
from experiments import Experiments, Configs
from experiments.useful import timestamped_to_vector, unison_shuffled_copies, extract_neg

# Load data
headers = Header()
c = headers.classification_col  # index 55
print(c)
data = pd.read_csv("cleandata.csv")  # convert tabular data into DataFrame
# print(data)
# print(data.shape)
# print(data.size)
# print(data.ndim)
# print(data.values)            # returns actual data in dataframe as an ndarray

# print(data["test_set"])                 # indexing and selecting data. print the whole test_set column.
# print(data["test_set"] == True)         # compares each value in test_set column to True then generates a Series object full of boolean values(True/False) indicating the status of the comparison
# check = data["test_set"] == True
# filtered_check = data[check]
# print(filtered_check)

# check2 = data["test_set"] == False
# print(check2)
# filtered_check2 = data[check2]
# print(filtered_check2)

test = data[data["test_set"] == True]
# rint(test)
train = data[data["test_set"] == False]
# print(train)
'''convert DataFrame to its Numpy-array. only values of the DataFrame will be returned
with the specified columns. n-dimensional array'''
train = train.as_matrix(columns=headers.training_headers)
# train = train[headers.training_headers].values
test = test.as_matrix(columns=headers.training_headers)
# print(test)
# print(train)
# print(train[:10, :])    # first 10 rows and all columns
# print(train.dtype)      # data type of the matrix
# print(train.shape)        # tuple of how many rows and column it has

x_test, y_test = timestamped_to_vector(test, classification_col=c)
x_train, y_train = timestamped_to_vector(train, classification_col=c)
# tuple returned by the function is assigned to the x and y variables
#print(x_train)
#print(y_train)
#print(x_test)
#print(y_test)

# Random search with thresholding
rand_params = Configs.get_all()

expt = Experiments.Experiment(rand_params, search_algorithm="random",
                              data=(x_train, y_train), folds=10, folder_name="random_search_results",
                              thresholding=True, threshold=0.5)

# parameter configurations
A_B_C = Configs.get_A_B_C()

# Ensemble model
ensemble_config = Experiments.Ensemble_configurations(list(A_B_C.values()),
                                                      x_test=x_test, y_test=y_test,
                                                      x_train=x_train, y_train=y_train,
                                                      folder_name="test_train_results",
                                                      batch_size=64)
ensemble_config.run_experiments()
